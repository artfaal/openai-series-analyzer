"""
AI Analyzer
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤
"""

import os
import json
from pathlib import Path
from typing import List, Dict
import openai
from dotenv import load_dotenv
from models.data_models import MediaFile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
openai.api_key = OPENAI_API_KEY


class AIAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ OpenAI API"""

    def __init__(self):
        self.api_key = OPENAI_API_KEY

    def analyze(
        self,
        files: List[MediaFile],
        dir_info: Dict,
        directory_name: str
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é OpenAI API

        Args:
            files: –°–ø–∏—Å–æ–∫ MediaFile –æ–±—ä–µ–∫—Ç–æ–≤
            dir_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            directory_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: title, year, season, total_episodes, needs_confirmation
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not self.api_key:
            print("\n‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
            return self._get_fallback_result(dir_info, files)

        print("\nü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI API...")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        video_files = [f for f in files if f.file_type == 'video']
        subtitle_tracks = set(f.subtitle_track for f in files
                             if f.file_type == 'subtitle' and f.subtitle_track)

        file_summary = f"""
–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory_name}

–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã ({len(video_files)} —à—Ç):
{chr(10).join([f"- {f.filename}" for f in video_files[:3]])}
{"..." if len(video_files) > 3 else ""}

–°—É–±—Ç–∏—Ç—Ä—ã (—Ç—Ä–µ–∫–∏): {', '.join(subtitle_tracks) if subtitle_tracks else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- –í–æ–∑–º–æ–∂–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {dir_info.get('title', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
- –°–µ–∑–æ–Ω: {dir_info.get('season', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}
- –†–µ–ª–∏–∑-–≥—Ä—É–ø–ø–∞: {dir_info.get('release_group', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
"""

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ/–∞–Ω–∏–º–µ:

{file_summary}

–ó–∞–¥–∞—á–∏:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–¥–ª—è Plex)
2. –û–ø—Ä–µ–¥–µ–ª–∏ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞
4. –£–∫–∞–∂–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{{
  "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–±–µ–∑ —Ç–æ—á–µ–∫, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã)",
  "year": –≥–æ–¥ –∏–ª–∏ null,
  "season": –Ω–æ–º–µ—Ä_—Å–µ–∑–æ–Ω–∞,
  "total_episodes": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
  "needs_confirmation": true/false (–µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
}}

–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ TVDB/TMDB
- –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Ä–æ–º–∞–¥–∑–∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
- –ì–æ–¥ - —ç—Ç–æ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ —Å–µ—Ä–∏–∞–ª–∞, –Ω–µ –≥–æ–¥ —Ä–µ–ª–∏–∑–∞"""

        try:
            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∏–º–µ –∏ —Å–µ—Ä–∏–∞–ª–∞–º. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3
            )

            content = response.choices[0].message.content.strip()

            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if content.startswith('```'):
                content = content.split('```')[1]
                if content.startswith('json'):
                    content = content[4:]
                content = content.strip()

            result = json.loads(content)
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
            return result

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"   –û—Ç–≤–µ—Ç API: {content[:200]}...")
            return self._get_fallback_result(dir_info, files)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return self._get_fallback_result(dir_info, files)

    def _get_fallback_result(self, dir_info: Dict, files: List[MediaFile]) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'title': dir_info.get('title', 'Unknown'),
            'year': None,
            'season': dir_info.get('season', 1),
            'total_episodes': len([f for f in files if f.file_type == 'video']),
            'needs_confirmation': True
        }
