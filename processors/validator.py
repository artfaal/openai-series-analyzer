"""
Media Validator
–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é MediaInfo
"""

from pathlib import Path
from typing import List
from pymediainfo import MediaInfo
from models.data_models import MediaValidationResult


class MediaValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""

    def validate_file(self, file_path: Path) -> MediaValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é MediaInfo

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            MediaValidationResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        result = MediaValidationResult(file_path=file_path, is_valid=False)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            result.file_size_mb = file_path.stat().st_size / (1024 * 1024)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é MediaInfo
            media_info = MediaInfo.parse(str(file_path))

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
            for track in media_info.tracks:
                if track.track_type == 'General':
                    if track.duration:
                        result.duration = track.duration / 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º—Å –≤ —Å–µ–∫—É–Ω–¥—ã

                elif track.track_type == 'Video':
                    result.video_tracks += 1
                    if not result.video_codec:
                        result.video_codec = track.codec_id or track.format
                    if track.width and track.height:
                        result.resolution = f"{track.width}x{track.height}"

                elif track.track_type == 'Audio':
                    result.audio_tracks += 1
                    codec = track.codec_id or track.format
                    if codec and codec not in result.audio_codecs:
                        result.audio_codecs.append(codec)

                elif track.track_type == 'Text':
                    result.subtitle_tracks += 1

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if result.video_tracks == 0:
                result.errors.append("–ù–µ—Ç –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫–∏")
            elif result.video_tracks > 1:
                result.warnings.append(f"–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–µ–∫: {result.video_tracks}")

            if result.audio_tracks == 0:
                result.warnings.append("–ù–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–µ–∫")

            if not result.duration or result.duration < 60:
                result.errors.append(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ: {result.duration:.1f}s")

            # –§–∞–π–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            result.is_valid = len(result.errors) == 0

        except Exception as e:
            result.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            result.is_valid = False

        return result

    def print_validation_result(self, validation: MediaValidationResult):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        status = "‚úÖ" if validation.is_valid else "‚ùå"
        print(f"\n{status} {validation.file_path.name}")
        print(f"   –†–∞–∑–º–µ—Ä: {validation.file_size_mb:.1f} MB")

        if validation.duration:
            minutes = int(validation.duration // 60)
            seconds = int(validation.duration % 60)
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}m {seconds}s")

        print(f"   –í–∏–¥–µ–æ: {validation.video_tracks} —Ç—Ä–µ–∫(–æ–≤)", end="")
        if validation.video_codec:
            print(f" [{validation.video_codec}]", end="")
        if validation.resolution:
            print(f" {validation.resolution}", end="")
        print()

        print(f"   –ê—É–¥–∏–æ: {validation.audio_tracks} —Ç—Ä–µ–∫(–æ–≤)", end="")
        if validation.audio_codecs:
            print(f" [{', '.join(validation.audio_codecs)}]", end="")
        print()

        print(f"   –°—É–±—Ç–∏—Ç—Ä—ã: {validation.subtitle_tracks} —Ç—Ä–µ–∫(–æ–≤)")

        if validation.errors:
            for error in validation.errors:
                print(f"   ‚ùå {error}")

        if validation.warnings:
            for warning in validation.warnings:
                print(f"   ‚ö†Ô∏è  {warning}")

    def validate_directory(self, output_path: Path) -> tuple[int, int]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ MKV —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        Args:
            output_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏

        Returns:
            Tuple (valid_count, invalid_count)
        """
        print("\n" + "="*60)
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –í–´–•–û–î–ù–´–• –§–ê–ô–õ–û–í")
        print("="*60)

        mkv_files = sorted(output_path.glob("*.mkv"))

        if not mkv_files:
            print("‚ö†Ô∏è  MKV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0, 0

        valid_count = 0
        invalid_count = 0

        for mkv_file in mkv_files:
            validation = self.validate_file(mkv_file)
            self.print_validation_result(validation)

            if validation.is_valid:
                valid_count += 1
            else:
                invalid_count += 1

        print("\n" + "="*60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}")
        print(f"   ‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {invalid_count}")
        print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(mkv_files)}")
        print("="*60)

        return valid_count, invalid_count
