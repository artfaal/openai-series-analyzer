"""
EAC3 Audio Converter
–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç EAC3 (E-AC-3) –∞—É–¥–∏–æ—Ç—Ä–µ–∫–∏ –≤ AAC –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg
"""

import subprocess
from pathlib import Path
from typing import List, Optional, Tuple
from pymediainfo import MediaInfo


class AudioConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä EAC3 –∞—É–¥–∏–æ –≤ AAC"""

    def __init__(self):
        self.ffmpeg_path = 'ffmpeg'
        self.mkvmerge_path = 'mkvmerge'

    def detect_eac3_tracks(self, mkv_file: Path) -> List[int]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã EAC3 –∞—É–¥–∏–æ—Ç—Ä–µ–∫–æ–≤ –≤ MKV —Ñ–∞–π–ª–µ

        Args:
            mkv_file: –ü—É—Ç—å –∫ MKV —Ñ–∞–π–ª—É

        Returns:
            List –∏–Ω–¥–µ–∫—Å–æ–≤ —Ç—Ä–µ–∫–æ–≤ —Å EAC3 –∫–æ–¥–µ–∫–æ–º
        """
        eac3_tracks = []

        try:
            media_info = MediaInfo.parse(str(mkv_file))

            for track in media_info.tracks:
                if track.track_type == 'Audio':
                    codec = (track.codec_id or track.format or '').upper()
                    # EAC3 –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫: E-AC-3, EAC3, A_EAC3
                    if 'EAC3' in codec or 'E-AC-3' in codec or 'A_EAC3' in codec:
                        # track_id –≤ MediaInfo –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –Ω–∞–º –Ω—É–∂–µ–Ω 0-based index
                        track_index = track.track_id - 1 if track.track_id else 0
                        eac3_tracks.append(track_index)

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {mkv_file.name}: {e}")

        return eac3_tracks

    def extract_audio_track(self, mkv_file: Path, track_index: int, output_file: Path) -> bool:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ—Ç—Ä–µ–∫ –∏–∑ MKV

        Args:
            mkv_file: –ü—É—Ç—å –∫ MKV —Ñ–∞–π–ª—É
            track_index: –ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # ffmpeg -i input.mkv -map 0:a:0 -c copy output.eac3
            cmd = [
                self.ffmpeg_path,
                '-i', str(mkv_file),
                '-map', f'0:a:{track_index}',
                '-c', 'copy',
                '-y',
                str(output_file)
            ]

            subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e.stderr}")
            return False

    def convert_to_aac(self, input_audio: Path, output_audio: Path) -> bool:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ AAC

        Args:
            input_audio: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            output_audio: –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ AAC —Ñ–∞–π–ª–∞

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # ffmpeg -i input.eac3 -c:a aac -b:a 192k output.aac
            cmd = [
                self.ffmpeg_path,
                '-i', str(input_audio),
                '-c:a', 'aac',
                '-b:a', '192k',  # –±–∏—Ç—Ä–µ–π—Ç 192 kbps
                '-y',
                str(output_audio)
            ]

            subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ AAC: {e.stderr}")
            return False

    def replace_audio_in_mkv(
        self,
        mkv_file: Path,
        track_index: int,
        new_audio: Path,
        output_mkv: Path
    ) -> bool:
        """
        –ó–∞–º–µ–Ω—è–µ—Ç –∞—É–¥–∏–æ—Ç—Ä–µ–∫ –≤ MKV —Ñ–∞–π–ª–µ

        Args:
            mkv_file: –ò—Å—Ö–æ–¥–Ω—ã–π MKV —Ñ–∞–π–ª
            track_index: –ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
            new_audio: –ù–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (AAC)
            output_mkv: –í—ã—Ö–æ–¥–Ω–æ–π MKV —Ñ–∞–π–ª

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # mkvmerge -o output.mkv input.mkv --audio-tracks !track_index new_audio.aac
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–µ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            cmd = [
                self.mkvmerge_path,
                '-o', str(output_mkv),
                '--audio-tracks', f'!{track_index}',  # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–µ–∫
                str(mkv_file),
                str(new_audio)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
            ]

            subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–∞ –≤ MKV: {e.stderr}")
            return False

    def process_file(self, mkv_file: Path, temp_dir: Optional[Path] = None) -> Optional[Path]:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ EAC3, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –∑–∞–º–µ–Ω–∞

        Args:
            mkv_file: –ü—É—Ç—å –∫ MKV —Ñ–∞–π–ª—É
            temp_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è parent —Ñ–∞–π–ª–∞)

        Returns:
            Path –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å/–Ω–µ—É–¥–∞—á–Ω–∞
        """
        eac3_tracks = self.detect_eac3_tracks(mkv_file)

        if not eac3_tracks:
            return None  # –ù–µ—Ç EAC3 —Ç—Ä–µ–∫–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

        print(f"\nüîä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ EAC3 —Ç—Ä–µ–∫–æ–≤: {len(eac3_tracks)} –≤ {mkv_file.name}")

        if temp_dir is None:
            temp_dir = mkv_file.parent

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π EAC3 —Ç—Ä–µ–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        # TODO: –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏
        track_index = eac3_tracks[0]
        print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç—Ä–µ–∫–∞ #{track_index}...")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_eac3 = temp_dir / f"{mkv_file.stem}_temp.eac3"
        temp_aac = temp_dir / f"{mkv_file.stem}_temp.aac"
        output_mkv = temp_dir / f"{mkv_file.stem}_converted.mkv"

        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º EAC3 —Ç—Ä–µ–∫
            if not self.extract_audio_track(mkv_file, track_index, temp_eac3):
                return None

            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ AAC
            if not self.convert_to_aac(temp_eac3, temp_aac):
                return None

            # 3. –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫ –≤ MKV
            if not self.replace_audio_in_mkv(mkv_file, track_index, temp_aac, output_mkv):
                return None

            print(f"‚úÖ EAC3 ‚Üí AAC –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_mkv.name}")
            return output_mkv

        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for temp_file in [temp_eac3, temp_aac]:
                if temp_file.exists():
                    temp_file.unlink()
