"""
MKV Merger
Combines video, audio and subtitles into final MKV file
"""

import subprocess
from pathlib import Path
from typing import List, Optional
from models.data_models import MediaFile


class MKVMerger:
    """Combines media files into MKV container"""

    def __init__(self):
        self.mkvmerge_path = 'mkvmerge'

    def merge_episode(
        self,
        video: MediaFile,
        audio_tracks: List[MediaFile],
        subtitles: List[MediaFile],
        output_file: Path
    ) -> bool:
        """
        Combines video, audio and subtitles into one MKV

        Args:
            video: Video file
            audio_tracks: List of audio tracks
            subtitles: List of subtitles
            output_file: Path for output file

        Returns:
            True if successful, False on error
        """
        if not video:
            print(f"‚ö†Ô∏è  –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False

        print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ø–∏–∑–æ–¥–∞:")
        print(f"   –í–∏–¥–µ–æ: {video.filename}")
        print(f"   –ê—É–¥–∏–æ: {len(audio_tracks)} —Ç—Ä–µ–∫–æ–≤")
        print(f"   –°—É–±—Ç–∏—Ç—Ä—ã: {len(subtitles)} —Ç—Ä–µ–∫–æ–≤")

        # Build mkvmerge command
        cmd = [self.mkvmerge_path, '-o', str(output_file)]

        # Add video
        cmd.extend([str(video.path)])

        # Add audio tracks
        for audio in audio_tracks:
            cmd.extend([str(audio.path)])

        # Add subtitles with proper track names
        for sub in subtitles:
            track_name = sub.subtitle_track or "Russian"
            cmd.extend([
                '--language', '0:rus',
                '--track-name', f'0:{track_name}',
                str(sub.path)
            ])

        try:
            result = subprocess.run(
                cmd,
                check=True,
                capture_output=True,
                text=True,
                encoding='utf-8'
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_file.name}")
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ mkvmerge: {e.stderr}")
            return False
