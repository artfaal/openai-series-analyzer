"""
Track Embedder
–í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∞—É–¥–∏–æ –∏ —Å—É–±—Ç–∏—Ç—Ä—ã –≤ MKV –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
"""

import subprocess
from pathlib import Path
from typing import List, Optional
from models.data_models import MediaFile


class TrackEmbedder:
    """–í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Ç—Ä–µ–∫–∏ (–∞—É–¥–∏–æ, —Å—É–±—Ç–∏—Ç—Ä—ã) –≤ MKV"""

    def __init__(self):
        self.mkvmerge_path = 'mkvmerge'

    def has_external_tracks(
        self,
        audio_files: List[MediaFile],
        subtitle_files: List[MediaFile]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ç—Ä–µ–∫–æ–≤

        Args:
            audio_files: –°–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
            subtitle_files: –°–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤

        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Ç—Ä–µ–∫–∏
        """
        return len(audio_files) > 0 or len(subtitle_files) > 0

    def embed_tracks(
        self,
        mkv_file: Path,
        audio_files: List[MediaFile],
        subtitle_files: List[MediaFile],
        output_file: Optional[Path] = None
    ) -> Optional[Path]:
        """
        –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Ç—Ä–µ–∫–∏ –≤ MKV —Ñ–∞–π–ª

        Args:
            mkv_file: –ò—Å—Ö–æ–¥–Ω—ã–π MKV —Ñ–∞–π–ª
            audio_files: –°–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
            subtitle_files: –°–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
            output_file: –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–µ—Å–ª–∏ None, –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª)

        Returns:
            Path –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.has_external_tracks(audio_files, subtitle_files):
            return mkv_file  # –ù–µ—á–µ–≥–æ –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å

        if output_file is None:
            output_file = mkv_file.parent / f"{mkv_file.stem}_embedded.mkv"

        print(f"\nüì¶ –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ç—Ä–µ–∫–æ–≤ –≤ {mkv_file.name}")
        print(f"   –ê—É–¥–∏–æ: {len(audio_files)}, –°—É–±—Ç–∏—Ç—Ä—ã: {len(subtitle_files)}")

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É mkvmerge
            cmd = [
                self.mkvmerge_path,
                '-o', str(output_file),
                str(mkv_file)
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ç—Ä–µ–∫–∏
            for audio in audio_files:
                cmd.append(str(audio.path))
                print(f"   + –ê—É–¥–∏–æ: {audio.filename}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            for sub in subtitle_files:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                track_name = sub.subtitle_track or "Russian"
                cmd.extend([
                    '--language', '0:rus',
                    '--track-name', f'0:{track_name}',
                    str(sub.path)
                ])
                print(f"   + –°—É–±—Ç–∏—Ç—Ä—ã: {track_name}")

            result = subprocess.run(
                cmd,
                check=True,
                capture_output=True,
                text=True,
                encoding='utf-8'
            )

            print(f"‚úÖ –¢—Ä–µ–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã: {output_file.name}")
            return output_file

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ mkvmerge –ø—Ä–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤")
            print(f"   {e.stderr}")
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
