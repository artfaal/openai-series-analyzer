#!/usr/bin/env python3
"""
Media Organizer - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ä–∏–∞–ª–æ–≤/–∞–Ω–∏–º–µ –¥–ª—è Plex
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–µ–ª–∏–∑–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
"""

import os
import json
import re
import subprocess
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass, field
from collections import defaultdict
import openai
from dotenv import load_dotenv
from pymediainfo import MediaInfo

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
openai.api_key = OPENAI_API_KEY

@dataclass
class MediaFile:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ"""
    path: Path
    filename: str
    file_type: str  # 'video', 'audio', 'subtitle', 'unknown'
    language: Optional[str] = None
    episode_number: Optional[int] = None
    season_number: Optional[int] = None
    subtitle_track: Optional[str] = None  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ê–Ω–∏–º–µ–≤–æ–¥, CR –∏ —Ç.–¥.)
    is_duplicate: bool = False

@dataclass
class SeriesInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–∏–∞–ª–µ"""
    title: str
    year: Optional[int]
    season: int
    total_episodes: int
    release_group: Optional[str] = None

@dataclass
class MediaValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
    file_path: Path
    is_valid: bool
    duration: Optional[float] = None  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    video_tracks: int = 0
    audio_tracks: int = 0
    subtitle_tracks: int = 0
    video_codec: Optional[str] = None
    audio_codecs: List[str] = field(default_factory=list)
    resolution: Optional[str] = None
    file_size_mb: Optional[float] = None
    errors: List[str] = field(default_factory=list)
    warnings: List[str] = field(default_factory=list)

class MediaOrganizer:
    def __init__(self, directory: str):
        self.directory = Path(directory)
        self.files: List[MediaFile] = []
        self.series_info: Optional[SeriesInfo] = None
        self.episode_map: Dict[int, Dict] = defaultdict(lambda: {
            'video': None,
            'audio': [],
            'subtitles': []
        })

    def extract_info_from_dirname(self) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        dirname = self.directory.name
        print(f"üìÇ –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dirname}")

        info = {
            'title': None,
            'season': None,
            'year': None,
            'release_group': None
        }

        # –ü–∞—Ç—Ç–µ—Ä–Ω: –ù–∞–∑–≤–∞–Ω–∏–µ.S01.–∫–∞—á–µ—Å—Ç–≤–æ-–ì–†–£–ü–ü–ê
        pattern = r'^(.+?)\.S(\d+).*?-(\w+)$'
        match = re.match(pattern, dirname)

        if match:
            title = match.group(1).replace('.', ' ')
            info['title'] = title
            info['season'] = int(match.group(2))
            info['release_group'] = match.group(3)
            print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {title} (–°–µ–∑–æ–Ω {info['season']}, –ì—Ä—É–ø–ø–∞: {info['release_group']})")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

        return info

    def extract_episode_info(self, filename: str) -> Tuple[Optional[int], Optional[int]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞ –∏ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω: S01E01 –∏–ª–∏ s01e01
        pattern = r'[Ss](\d+)[Ee](\d+)'
        match = re.search(pattern, filename)

        if match:
            season = int(match.group(1))
            episode = int(match.group(2))
            return season, episode

        return None, None

    def detect_subtitle_track(self, filename: str, parent_dir: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"""
        # –ò–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if '–ê–Ω–∏–º–µ–≤–æ–¥' in filename or '–∞–Ω–∏–º–µ–≤–æ–¥' in filename.lower():
            return '–ê–Ω–∏–º–µ–≤–æ–¥'
        if 'CR' in filename or filename.endswith('.ru_CR.ass'):
            return 'Crunchyroll'

        # –ò–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if '–ê–Ω–∏–º–µ–≤–æ–¥' in parent_dir:
            return '–ê–Ω–∏–º–µ–≤–æ–¥'
        if 'CR' in parent_dir:
            return 'Crunchyroll'

        return None

    def scan_directory(self) -> List[MediaFile]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã"""
        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.directory}")

        media_extensions = {
            'video': ['.mkv', '.mp4', '.avi', '.m4v', '.ts'],
            'audio': ['.mka', '.aac', '.mp3', '.flac', '.ac3', '.dts'],
            'subtitle': ['.srt', '.ass', '.ssa', '.sub', '.sup']
        }

        files = []
        subtitle_hashes = {}  # –î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

        for item in self.directory.rglob('*'):
            if item.is_file() and item.name != '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.txt':
                ext = item.suffix.lower()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_type = None
                for ftype, extensions in media_extensions.items():
                    if ext in extensions:
                        file_type = ftype
                        break

                if file_type:
                    season, episode = self.extract_episode_info(item.name)

                    media_file = MediaFile(
                        path=item,
                        filename=item.name,
                        file_type=file_type,
                        season_number=season,
                        episode_number=episode
                    )

                    # –î–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                    if file_type == 'subtitle':
                        media_file.subtitle_track = self.detect_subtitle_track(
                            item.name,
                            item.parent.name
                        )

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                        file_size = item.stat().st_size
                        hash_key = (episode, media_file.subtitle_track, file_size)

                        if hash_key in subtitle_hashes:
                            media_file.is_duplicate = True
                            print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {item.name}")
                        else:
                            subtitle_hashes[hash_key] = item

                    files.append(media_file)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        print(f"   - –í–∏–¥–µ–æ: {sum(1 for f in files if f.file_type == 'video')}")
        print(f"   - –ê—É–¥–∏–æ: {sum(1 for f in files if f.file_type == 'audio')}")
        print(f"   - –°—É–±—Ç–∏—Ç—Ä—ã: {sum(1 for f in files if f.file_type == 'subtitle')}")

        return files

    def analyze_with_ai(self, files: List[MediaFile], dir_info: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é OpenAI API"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not OPENAI_API_KEY:
            print("\n‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
            return {
                'title': dir_info.get('title', 'Unknown'),
                'year': None,
                'season': dir_info.get('season', 1),
                'total_episodes': len([f for f in files if f.file_type == 'video']),
                'needs_confirmation': True
            }

        print("\nü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI API...")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        video_files = [f for f in files if f.file_type == 'video']
        subtitle_tracks = set(f.subtitle_track for f in files
                             if f.file_type == 'subtitle' and f.subtitle_track)

        file_summary = f"""
–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.directory.name}

–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã ({len(video_files)} —à—Ç):
{chr(10).join([f"- {f.filename}" for f in video_files[:3]])}
{"..." if len(video_files) > 3 else ""}

–°—É–±—Ç–∏—Ç—Ä—ã (—Ç—Ä–µ–∫–∏): {', '.join(subtitle_tracks) if subtitle_tracks else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- –í–æ–∑–º–æ–∂–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {dir_info.get('title', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
- –°–µ–∑–æ–Ω: {dir_info.get('season', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}
- –†–µ–ª–∏–∑-–≥—Ä—É–ø–ø–∞: {dir_info.get('release_group', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
"""

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ/–∞–Ω–∏–º–µ:

{file_summary}

–ó–∞–¥–∞—á–∏:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–¥–ª—è Plex)
2. –û–ø—Ä–µ–¥–µ–ª–∏ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞
4. –£–∫–∞–∂–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{{
  "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–±–µ–∑ —Ç–æ—á–µ–∫, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã)",
  "year": –≥–æ–¥ –∏–ª–∏ null,
  "season": –Ω–æ–º–µ—Ä_—Å–µ–∑–æ–Ω–∞,
  "total_episodes": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
  "needs_confirmation": true/false (–µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
}}

–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ TVDB/TMDB
- –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Ä–æ–º–∞–¥–∑–∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
- –ì–æ–¥ - —ç—Ç–æ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ —Å–µ—Ä–∏–∞–ª–∞, –Ω–µ –≥–æ–¥ —Ä–µ–ª–∏–∑–∞"""

        try:
            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∏–º–µ –∏ —Å–µ—Ä–∏–∞–ª–∞–º. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3
            )

            content = response.choices[0].message.content.strip()

            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if content.startswith('```'):
                content = content.split('```')[1]
                if content.startswith('json'):
                    content = content[4:]
                content = content.strip()

            result = json.loads(content)
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
            return result

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"   –û—Ç–≤–µ—Ç API: {content[:200]}...")
            return self._get_fallback_result(dir_info, files)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return self._get_fallback_result(dir_info, files)

    def _get_fallback_result(self, dir_info: Dict, files: List[MediaFile]) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'title': dir_info.get('title', 'Unknown'),
            'year': None,
            'season': dir_info.get('season', 1),
            'total_episodes': len([f for f in files if f.file_type == 'video']),
            'needs_confirmation': True
        }

    def confirm_series_info(self, ai_result: Dict, dir_info: Dict) -> SeriesInfo:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∞–ª–µ"""
        print("\n" + "="*60)
        print("üì∫ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–ò–ê–õ–ï")
        print("="*60)
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ:      {ai_result['title']}")
        print(f"–ì–æ–¥:           {ai_result.get('year', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}")
        print(f"–°–µ–∑–æ–Ω:         {ai_result['season']}")
        print(f"–≠–ø–∏–∑–æ–¥–æ–≤:      {ai_result['total_episodes']}")
        print(f"–†–µ–ª–∏–∑-–≥—Ä—É–ø–ø–∞:  {dir_info.get('release_group', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")

        if ai_result.get('needs_confirmation'):
            print("\n‚ö†Ô∏è  AI –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")

        print("="*60)

        while True:
            choice = input("\n[1] –í—Å—ë –≤–µ—Ä–Ω–æ\n[2] –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n[3] –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë\n–í—ã–±–æ—Ä: ").strip()

            if choice == '1':
                return SeriesInfo(
                    title=ai_result['title'],
                    year=ai_result.get('year'),
                    season=ai_result['season'],
                    total_episodes=ai_result['total_episodes'],
                    release_group=dir_info.get('release_group')
                )

            elif choice == '2':
                title = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª.): ").strip()
                return SeriesInfo(
                    title=title,
                    year=ai_result.get('year'),
                    season=ai_result['season'],
                    total_episodes=ai_result['total_episodes'],
                    release_group=dir_info.get('release_group')
                )

            elif choice == '3':
                title = input("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª.): ").strip()
                year_input = input("–ì–æ–¥ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
                year = int(year_input) if year_input else None
                season = int(input("–ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞: ").strip())

                return SeriesInfo(
                    title=title,
                    year=year,
                    season=season,
                    total_episodes=ai_result['total_episodes'],
                    release_group=dir_info.get('release_group')
                )
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    def organize_files(self):
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —ç–ø–∏–∑–æ–¥–∞–º"""
        print("\nüìã –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —ç–ø–∏–∑–æ–¥–∞–º...")

        for file in self.files:
            if file.episode_number:
                ep = file.episode_number

                if file.file_type == 'video':
                    self.episode_map[ep]['video'] = file
                elif file.file_type == 'audio':
                    self.episode_map[ep]['audio'].append(file)
                elif file.file_type == 'subtitle' and not file.is_duplicate:
                    self.episode_map[ep]['subtitles'].append(file)

        print(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(self.episode_map)}")

    def generate_plex_filename(self, episode_num: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É Plex"""
        series = self.series_info
        season_str = f"S{series.season:02d}"
        episode_str = f"E{episode_num:02d}"

        filename = f"{series.title} - {season_str}{episode_str}.mkv"
        return filename

    def create_output_structure(self) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è Plex"""
        series = self.series_info

        series_folder = f"{series.title}"
        if series.year:
            series_folder += f" ({series.year})"

        season_folder = f"Season {series.season:02d}"

        output_path = self.directory.parent / series_folder / season_folder
        output_path.mkdir(parents=True, exist_ok=True)

        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {output_path}")
        return output_path

    def merge_episode(self, episode_num: int, output_file: Path):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Å—É–±—Ç–∏—Ç—Ä—ã –≤ –æ–¥–∏–Ω MKV"""
        ep_data = self.episode_map[episode_num]

        if not ep_data['video']:
            print(f"‚ö†Ô∏è  –≠–ø–∏–∑–æ–¥ {episode_num}: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False

        print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ø–∏–∑–æ–¥–∞ {episode_num}:")
        print(f"   –í–∏–¥–µ–æ: {ep_data['video'].filename}")
        print(f"   –ê—É–¥–∏–æ: {len(ep_data['audio'])} —Ç—Ä–µ–∫–æ–≤")
        print(f"   –°—É–±—Ç–∏—Ç—Ä—ã: {len(ep_data['subtitles'])} —Ç—Ä–µ–∫–æ–≤")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É mkvmerge
        cmd = ['mkvmerge', '-o', str(output_file)]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        cmd.extend([str(ep_data['video'].path)])

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏
        for audio in ep_data['audio']:
            cmd.extend([str(audio.path)])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç—Ä–µ–∫–æ–≤
        for sub in ep_data['subtitles']:
            track_name = sub.subtitle_track or "Russian"
            cmd.extend([
                '--language', '0:rus',
                '--track-name', f'0:{track_name}',
                str(sub.path)
            ])

        try:
            result = subprocess.run(
                cmd,
                check=True,
                capture_output=True,
                text=True,
                encoding='utf-8'
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_file.name}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ mkvmerge: {e.stderr}")
            return False

    def validate_media_file(self, file_path: Path) -> MediaValidationResult:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é MediaInfo"""
        result = MediaValidationResult(file_path=file_path, is_valid=False)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            result.file_size_mb = file_path.stat().st_size / (1024 * 1024)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é MediaInfo
            media_info = MediaInfo.parse(str(file_path))

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
            for track in media_info.tracks:
                if track.track_type == 'General':
                    if track.duration:
                        result.duration = track.duration / 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º—Å –≤ —Å–µ–∫—É–Ω–¥—ã

                elif track.track_type == 'Video':
                    result.video_tracks += 1
                    if not result.video_codec:
                        result.video_codec = track.codec_id or track.format
                    if track.width and track.height:
                        result.resolution = f"{track.width}x{track.height}"

                elif track.track_type == 'Audio':
                    result.audio_tracks += 1
                    codec = track.codec_id or track.format
                    if codec and codec not in result.audio_codecs:
                        result.audio_codecs.append(codec)

                elif track.track_type == 'Text':
                    result.subtitle_tracks += 1

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if result.video_tracks == 0:
                result.errors.append("–ù–µ—Ç –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫–∏")
            elif result.video_tracks > 1:
                result.warnings.append(f"–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–µ–∫: {result.video_tracks}")

            if result.audio_tracks == 0:
                result.warnings.append("–ù–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–µ–∫")

            if not result.duration or result.duration < 60:
                result.errors.append(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ: {result.duration:.1f}s")

            # –§–∞–π–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            result.is_valid = len(result.errors) == 0

        except Exception as e:
            result.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            result.is_valid = False

        return result

    def print_validation_result(self, validation: MediaValidationResult):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        status = "‚úÖ" if validation.is_valid else "‚ùå"
        print(f"\n{status} {validation.file_path.name}")
        print(f"   –†–∞–∑–º–µ—Ä: {validation.file_size_mb:.1f} MB")

        if validation.duration:
            minutes = int(validation.duration // 60)
            seconds = int(validation.duration % 60)
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}m {seconds}s")

        print(f"   –í–∏–¥–µ–æ: {validation.video_tracks} —Ç—Ä–µ–∫(–æ–≤)", end="")
        if validation.video_codec:
            print(f" [{validation.video_codec}]", end="")
        if validation.resolution:
            print(f" {validation.resolution}", end="")
        print()

        print(f"   –ê—É–¥–∏–æ: {validation.audio_tracks} —Ç—Ä–µ–∫(–æ–≤)", end="")
        if validation.audio_codecs:
            print(f" [{', '.join(validation.audio_codecs)}]", end="")
        print()

        print(f"   –°—É–±—Ç–∏—Ç—Ä—ã: {validation.subtitle_tracks} —Ç—Ä–µ–∫(–æ–≤)")

        if validation.errors:
            for error in validation.errors:
                print(f"   ‚ùå {error}")

        if validation.warnings:
            for warning in validation.warnings:
                print(f"   ‚ö†Ô∏è  {warning}")

    def validate_output_files(self, output_path: Path):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("\n" + "="*60)
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –í–´–•–û–î–ù–´–• –§–ê–ô–õ–û–í")
        print("="*60)

        mkv_files = sorted(output_path.glob("*.mkv"))

        if not mkv_files:
            print("‚ö†Ô∏è  MKV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        valid_count = 0
        invalid_count = 0

        for mkv_file in mkv_files:
            validation = self.validate_media_file(mkv_file)
            self.print_validation_result(validation)

            if validation.is_valid:
                valid_count += 1
            else:
                invalid_count += 1

        print("\n" + "="*60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}")
        print(f"   ‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {invalid_count}")
        print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(mkv_files)}")
        print("="*60)

    def show_processing_plan(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("\n" + "="*60)
        print("üìã –ü–õ–ê–ù –û–ë–†–ê–ë–û–¢–ö–ò")
        print("="*60)

        for ep_num in sorted(self.episode_map.keys()):
            new_name = self.generate_plex_filename(ep_num)
            ep_data = self.episode_map[ep_num]

            print(f"\n–≠–ø–∏–∑–æ–¥ {ep_num:02d}:")
            print(f"  ‚Üí {new_name}")

            if ep_data['video']:
                print(f"  üìπ –í–∏–¥–µ–æ: {ep_data['video'].filename}")

            if ep_data['audio']:
                print(f"  üîä –ê—É–¥–∏–æ: {len(ep_data['audio'])} —Ç—Ä–µ–∫–æ–≤")
                for audio in ep_data['audio']:
                    print(f"      - {audio.filename}")

            if ep_data['subtitles']:
                print(f"  üí¨ –°—É–±—Ç–∏—Ç—Ä—ã:")
                for sub in ep_data['subtitles']:
                    track = sub.subtitle_track or "Unknown"
                    print(f"      - {track}")

        print("="*60)

    def process(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("\nüé¨ MEDIA ORGANIZER –î–õ–Ø PLEX v2.0")
        print("="*60)

        # 1. –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dir_info = self.extract_info_from_dirname()

        # 2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        self.files = self.scan_directory()
        if not self.files:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # 3. –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI
        ai_result = self.analyze_with_ai(self.files, dir_info)

        # 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.series_info = self.confirm_series_info(ai_result, dir_info)

        # 5. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        self.organize_files()

        # 6. –ü–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.show_processing_plan()

        # 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("\n‚ñ∂Ô∏è  –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É? (y/n): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return

        # 8. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        output_path = self.create_output_structure()

        # 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤
        print("\n" + "="*60)
        print("‚öôÔ∏è  –û–ë–†–ê–ë–û–¢–ö–ê")
        print("="*60)

        success_count = 0
        for ep_num in sorted(self.episode_map.keys()):
            output_file = output_path / self.generate_plex_filename(ep_num)
            if self.merge_episode(ep_num, output_file):
                success_count += 1

        # 10. –í–∞–ª–∏–¥–∞—Ü–∏—è
        if success_count > 0:
            self.validate_output_files(output_path)

        # 11. –ò—Ç–æ–≥
        print("\n" + "="*60)
        print("üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(self.episode_map)} —ç–ø–∏–∑–æ–¥–æ–≤")
        print(f"üìÅ –ü—É—Ç—å: {output_path}")
        print("="*60)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import sys

    if len(sys.argv) > 1:
        directory = sys.argv[1]
    else:
        directory = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å–µ—Ä–∏–∞–ª–æ–º: ").strip()

    if not os.path.isdir(directory):
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    try:
        organizer = MediaOrganizer(directory)
        organizer.process()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
